// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: ringio/fspb/treefsservice.proto

package fspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TreeFileSystemService_NewSpace_FullMethodName       = "/fspb.TreeFileSystemService/NewSpace"
	TreeFileSystemService_DeleteSpace_FullMethodName    = "/fspb.TreeFileSystemService/DeleteSpace"
	TreeFileSystemService_AllSpaces_FullMethodName      = "/fspb.TreeFileSystemService/AllSpaces"
	TreeFileSystemService_GetSpaceStat_FullMethodName   = "/fspb.TreeFileSystemService/GetSpaceStat"
	TreeFileSystemService_SetSpaceStat_FullMethodName   = "/fspb.TreeFileSystemService/SetSpaceStat"
	TreeFileSystemService_MakeDir_FullMethodName        = "/fspb.TreeFileSystemService/MakeDir"
	TreeFileSystemService_RenameDir_FullMethodName      = "/fspb.TreeFileSystemService/RenameDir"
	TreeFileSystemService_DeleteDir_FullMethodName      = "/fspb.TreeFileSystemService/DeleteDir"
	TreeFileSystemService_GetDirSub_FullMethodName      = "/fspb.TreeFileSystemService/GetDirSub"
	TreeFileSystemService_GetMetadata_FullMethodName    = "/fspb.TreeFileSystemService/GetMetadata"
	TreeFileSystemService_PutMetadata_FullMethodName    = "/fspb.TreeFileSystemService/PutMetadata"
	TreeFileSystemService_DeleteMetadata_FullMethodName = "/fspb.TreeFileSystemService/DeleteMetadata"
)

// TreeFileSystemServiceClient is the client API for TreeFileSystemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TreeFileSystemServiceClient interface {
	NewSpace(ctx context.Context, in *NewSpaceRequest, opts ...grpc.CallOption) (*Error, error)
	DeleteSpace(ctx context.Context, in *SpaceRequest, opts ...grpc.CallOption) (*Error, error)
	AllSpaces(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SpaceInfos, error)
	GetSpaceStat(ctx context.Context, in *GetSpaceStatRequest, opts ...grpc.CallOption) (*GetSpaceStatResponse, error)
	SetSpaceStat(ctx context.Context, in *SetSpaceStatRequest, opts ...grpc.CallOption) (*Error, error)
	MakeDir(ctx context.Context, in *TreeFileSystemBasicRequest, opts ...grpc.CallOption) (*Error, error)
	RenameDir(ctx context.Context, in *RenameDirRequest, opts ...grpc.CallOption) (*Error, error)
	DeleteDir(ctx context.Context, in *TreeFileSystemBasicRequest, opts ...grpc.CallOption) (*Error, error)
	GetDirSub(ctx context.Context, in *TreeFileSystemBasicRequest, opts ...grpc.CallOption) (*Subs, error)
	GetMetadata(ctx context.Context, in *TreeFileSystemBasicRequest, opts ...grpc.CallOption) (*BytesData, error)
	PutMetadata(ctx context.Context, in *PutMetadataRequest, opts ...grpc.CallOption) (*Error, error)
	DeleteMetadata(ctx context.Context, in *TreeFileSystemBasicRequest, opts ...grpc.CallOption) (*Error, error)
}

type treeFileSystemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTreeFileSystemServiceClient(cc grpc.ClientConnInterface) TreeFileSystemServiceClient {
	return &treeFileSystemServiceClient{cc}
}

func (c *treeFileSystemServiceClient) NewSpace(ctx context.Context, in *NewSpaceRequest, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, TreeFileSystemService_NewSpace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *treeFileSystemServiceClient) DeleteSpace(ctx context.Context, in *SpaceRequest, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, TreeFileSystemService_DeleteSpace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *treeFileSystemServiceClient) AllSpaces(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SpaceInfos, error) {
	out := new(SpaceInfos)
	err := c.cc.Invoke(ctx, TreeFileSystemService_AllSpaces_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *treeFileSystemServiceClient) GetSpaceStat(ctx context.Context, in *GetSpaceStatRequest, opts ...grpc.CallOption) (*GetSpaceStatResponse, error) {
	out := new(GetSpaceStatResponse)
	err := c.cc.Invoke(ctx, TreeFileSystemService_GetSpaceStat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *treeFileSystemServiceClient) SetSpaceStat(ctx context.Context, in *SetSpaceStatRequest, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, TreeFileSystemService_SetSpaceStat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *treeFileSystemServiceClient) MakeDir(ctx context.Context, in *TreeFileSystemBasicRequest, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, TreeFileSystemService_MakeDir_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *treeFileSystemServiceClient) RenameDir(ctx context.Context, in *RenameDirRequest, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, TreeFileSystemService_RenameDir_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *treeFileSystemServiceClient) DeleteDir(ctx context.Context, in *TreeFileSystemBasicRequest, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, TreeFileSystemService_DeleteDir_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *treeFileSystemServiceClient) GetDirSub(ctx context.Context, in *TreeFileSystemBasicRequest, opts ...grpc.CallOption) (*Subs, error) {
	out := new(Subs)
	err := c.cc.Invoke(ctx, TreeFileSystemService_GetDirSub_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *treeFileSystemServiceClient) GetMetadata(ctx context.Context, in *TreeFileSystemBasicRequest, opts ...grpc.CallOption) (*BytesData, error) {
	out := new(BytesData)
	err := c.cc.Invoke(ctx, TreeFileSystemService_GetMetadata_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *treeFileSystemServiceClient) PutMetadata(ctx context.Context, in *PutMetadataRequest, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, TreeFileSystemService_PutMetadata_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *treeFileSystemServiceClient) DeleteMetadata(ctx context.Context, in *TreeFileSystemBasicRequest, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, TreeFileSystemService_DeleteMetadata_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TreeFileSystemServiceServer is the server API for TreeFileSystemService service.
// All implementations must embed UnimplementedTreeFileSystemServiceServer
// for forward compatibility
type TreeFileSystemServiceServer interface {
	NewSpace(context.Context, *NewSpaceRequest) (*Error, error)
	DeleteSpace(context.Context, *SpaceRequest) (*Error, error)
	AllSpaces(context.Context, *emptypb.Empty) (*SpaceInfos, error)
	GetSpaceStat(context.Context, *GetSpaceStatRequest) (*GetSpaceStatResponse, error)
	SetSpaceStat(context.Context, *SetSpaceStatRequest) (*Error, error)
	MakeDir(context.Context, *TreeFileSystemBasicRequest) (*Error, error)
	RenameDir(context.Context, *RenameDirRequest) (*Error, error)
	DeleteDir(context.Context, *TreeFileSystemBasicRequest) (*Error, error)
	GetDirSub(context.Context, *TreeFileSystemBasicRequest) (*Subs, error)
	GetMetadata(context.Context, *TreeFileSystemBasicRequest) (*BytesData, error)
	PutMetadata(context.Context, *PutMetadataRequest) (*Error, error)
	DeleteMetadata(context.Context, *TreeFileSystemBasicRequest) (*Error, error)
	mustEmbedUnimplementedTreeFileSystemServiceServer()
}

// UnimplementedTreeFileSystemServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTreeFileSystemServiceServer struct {
}

func (UnimplementedTreeFileSystemServiceServer) NewSpace(context.Context, *NewSpaceRequest) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewSpace not implemented")
}
func (UnimplementedTreeFileSystemServiceServer) DeleteSpace(context.Context, *SpaceRequest) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSpace not implemented")
}
func (UnimplementedTreeFileSystemServiceServer) AllSpaces(context.Context, *emptypb.Empty) (*SpaceInfos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllSpaces not implemented")
}
func (UnimplementedTreeFileSystemServiceServer) GetSpaceStat(context.Context, *GetSpaceStatRequest) (*GetSpaceStatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpaceStat not implemented")
}
func (UnimplementedTreeFileSystemServiceServer) SetSpaceStat(context.Context, *SetSpaceStatRequest) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSpaceStat not implemented")
}
func (UnimplementedTreeFileSystemServiceServer) MakeDir(context.Context, *TreeFileSystemBasicRequest) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeDir not implemented")
}
func (UnimplementedTreeFileSystemServiceServer) RenameDir(context.Context, *RenameDirRequest) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameDir not implemented")
}
func (UnimplementedTreeFileSystemServiceServer) DeleteDir(context.Context, *TreeFileSystemBasicRequest) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDir not implemented")
}
func (UnimplementedTreeFileSystemServiceServer) GetDirSub(context.Context, *TreeFileSystemBasicRequest) (*Subs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDirSub not implemented")
}
func (UnimplementedTreeFileSystemServiceServer) GetMetadata(context.Context, *TreeFileSystemBasicRequest) (*BytesData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetadata not implemented")
}
func (UnimplementedTreeFileSystemServiceServer) PutMetadata(context.Context, *PutMetadataRequest) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutMetadata not implemented")
}
func (UnimplementedTreeFileSystemServiceServer) DeleteMetadata(context.Context, *TreeFileSystemBasicRequest) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMetadata not implemented")
}
func (UnimplementedTreeFileSystemServiceServer) mustEmbedUnimplementedTreeFileSystemServiceServer() {}

// UnsafeTreeFileSystemServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TreeFileSystemServiceServer will
// result in compilation errors.
type UnsafeTreeFileSystemServiceServer interface {
	mustEmbedUnimplementedTreeFileSystemServiceServer()
}

func RegisterTreeFileSystemServiceServer(s grpc.ServiceRegistrar, srv TreeFileSystemServiceServer) {
	s.RegisterService(&TreeFileSystemService_ServiceDesc, srv)
}

func _TreeFileSystemService_NewSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TreeFileSystemServiceServer).NewSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TreeFileSystemService_NewSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TreeFileSystemServiceServer).NewSpace(ctx, req.(*NewSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TreeFileSystemService_DeleteSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TreeFileSystemServiceServer).DeleteSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TreeFileSystemService_DeleteSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TreeFileSystemServiceServer).DeleteSpace(ctx, req.(*SpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TreeFileSystemService_AllSpaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TreeFileSystemServiceServer).AllSpaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TreeFileSystemService_AllSpaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TreeFileSystemServiceServer).AllSpaces(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TreeFileSystemService_GetSpaceStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpaceStatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TreeFileSystemServiceServer).GetSpaceStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TreeFileSystemService_GetSpaceStat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TreeFileSystemServiceServer).GetSpaceStat(ctx, req.(*GetSpaceStatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TreeFileSystemService_SetSpaceStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSpaceStatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TreeFileSystemServiceServer).SetSpaceStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TreeFileSystemService_SetSpaceStat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TreeFileSystemServiceServer).SetSpaceStat(ctx, req.(*SetSpaceStatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TreeFileSystemService_MakeDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TreeFileSystemBasicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TreeFileSystemServiceServer).MakeDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TreeFileSystemService_MakeDir_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TreeFileSystemServiceServer).MakeDir(ctx, req.(*TreeFileSystemBasicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TreeFileSystemService_RenameDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TreeFileSystemServiceServer).RenameDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TreeFileSystemService_RenameDir_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TreeFileSystemServiceServer).RenameDir(ctx, req.(*RenameDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TreeFileSystemService_DeleteDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TreeFileSystemBasicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TreeFileSystemServiceServer).DeleteDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TreeFileSystemService_DeleteDir_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TreeFileSystemServiceServer).DeleteDir(ctx, req.(*TreeFileSystemBasicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TreeFileSystemService_GetDirSub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TreeFileSystemBasicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TreeFileSystemServiceServer).GetDirSub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TreeFileSystemService_GetDirSub_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TreeFileSystemServiceServer).GetDirSub(ctx, req.(*TreeFileSystemBasicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TreeFileSystemService_GetMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TreeFileSystemBasicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TreeFileSystemServiceServer).GetMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TreeFileSystemService_GetMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TreeFileSystemServiceServer).GetMetadata(ctx, req.(*TreeFileSystemBasicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TreeFileSystemService_PutMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TreeFileSystemServiceServer).PutMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TreeFileSystemService_PutMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TreeFileSystemServiceServer).PutMetadata(ctx, req.(*PutMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TreeFileSystemService_DeleteMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TreeFileSystemBasicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TreeFileSystemServiceServer).DeleteMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TreeFileSystemService_DeleteMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TreeFileSystemServiceServer).DeleteMetadata(ctx, req.(*TreeFileSystemBasicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TreeFileSystemService_ServiceDesc is the grpc.ServiceDesc for TreeFileSystemService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TreeFileSystemService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fspb.TreeFileSystemService",
	HandlerType: (*TreeFileSystemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewSpace",
			Handler:    _TreeFileSystemService_NewSpace_Handler,
		},
		{
			MethodName: "DeleteSpace",
			Handler:    _TreeFileSystemService_DeleteSpace_Handler,
		},
		{
			MethodName: "AllSpaces",
			Handler:    _TreeFileSystemService_AllSpaces_Handler,
		},
		{
			MethodName: "GetSpaceStat",
			Handler:    _TreeFileSystemService_GetSpaceStat_Handler,
		},
		{
			MethodName: "SetSpaceStat",
			Handler:    _TreeFileSystemService_SetSpaceStat_Handler,
		},
		{
			MethodName: "MakeDir",
			Handler:    _TreeFileSystemService_MakeDir_Handler,
		},
		{
			MethodName: "RenameDir",
			Handler:    _TreeFileSystemService_RenameDir_Handler,
		},
		{
			MethodName: "DeleteDir",
			Handler:    _TreeFileSystemService_DeleteDir_Handler,
		},
		{
			MethodName: "GetDirSub",
			Handler:    _TreeFileSystemService_GetDirSub_Handler,
		},
		{
			MethodName: "GetMetadata",
			Handler:    _TreeFileSystemService_GetMetadata_Handler,
		},
		{
			MethodName: "PutMetadata",
			Handler:    _TreeFileSystemService_PutMetadata_Handler,
		},
		{
			MethodName: "DeleteMetadata",
			Handler:    _TreeFileSystemService_DeleteMetadata_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ringio/fspb/treefsservice.proto",
}
